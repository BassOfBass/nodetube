extends layout

append styles
  style.
    .dropdown {
      text-align: center;
    }

    .button, .dropdown-menu {
      margin: 10px auto
    }

    .dropdown-menu {
      width: 200px;
      left: 50%;
      margin-left: -100px;
    }

    input[type=checkbox] {
      /* Double-sized Checkboxes */
      -ms-transform: scale(2); /* IE */
      -moz-transform: scale(2); /* FF */
      -webkit-transform: scale(2); /* Safari and Chrome */
      -o-transform: scale(2); /* Opera */
      padding: 10px;
    }

    .ldBar-label {
      font-size: 2.1em;
      font-weight: 300;
    }

    .ldBar {
      margin: 0 auto;
    }

    .upload-information p, .formats p {
      font-weight:300;
      font-size:17px;
    }

    .descriptionTextArea {
      max-width:95%;
    }

append scripts
  script(src='/js/lib/resumable.js' defer)

block content
  h1 #[span.fas.fa-upload(aria-hidden="true")] File Upload
  section
    div.upload-information
      p #{brandName} supports video, audio and image uploads
      p Supported File Formats:
      dl
        dt Video
        dd .mp4, .avi, .flv, .MOV, .m4v, .ogv, .webm, .wmv, .mkv, .mov, .m2t, .MTS, .m2ts, .MPG, .AVI, .mpg
        dt Audio
        dd .mp3, .wav, .ogg, .m4a
        dt Image
        dd .png, .jpg, .jpeg, .gif, .JPG, .PNG

      p Your current upload file size limit is #{user.privs.uploadSize} MB (#{user.privs.uploadSize / 1000} GB)

      //- h3 Select Upload

      if user.plan == 'free' && plus_enabled
        p You can raise this limit to 2000 MB by subscribing for&nbsp
          a(href="/account?to=pt-plus") #{brandName} Plus

      if site_rating
        p Graphic violence, content that uses racial epithets, and overtly sexual content must be marked as Not Safe For Work
        p Shocking content must be marked as sensitive.
        p Not properly marking content as mature may result in a restriction of rating content as Safe For Work

      //- TODO: rewrite in proper `input(type="file")` format
      form.upload-form
        .center-block.text-center
          a.resumable-browse
            button.btn.btn-success.resumable-browser Select File
          h3 OR
          div#dropTarget(style="")
            img(src="/images/fixed.png" style="width:350px;")


          div(id="scrollTo")

          h3(style="font-size:30px;margin-bottom:15px;" id="uploadDetails") Upload Details

          label(style="font-size: 23px;" for='title') Title (*)
          input.center-block.text-center(style="max-width:600px;height:35px;border-radius:2px;font-size:20px;font-weight:300;" type="text" name="title" id="title" minlength=3, maxlength=100 required)

          //- add endpoint for visibility
          if user.plan == 'plus'
            fieldset
              legend Visibility
              div
                input#public(type='radio', name='visibility' value="public" checked)
                label(for="public") Public
              div
                input#unlisted(type='radio', name='visibility' value="unlisted")
                label(for="unlisted") Unlisted
              div
                input#private(type='radio', name='visibility' value="private")
                label(for="private") Private

          label(for='title' style="font-size:20px") Select A Category

          div.dropdown(style="display:inline;padding-right:15px;")
            button#dropdownMenu1.btn.btn-primary.dropdown-toggle(type='button', data-toggle='dropdown' style="border-radius:5px;font-size:15px;")
              | Category: &nbsp
              span.caret

            ul.dropdown-menu(role='menu', aria-labelledby='dropdownMenu1' style="margin-top:-17px;margin-left:-81px;")
              each category in categories
                li(role='presentation')
                  // this is being added because allUploads is not a legitimate category, but this is a bit of a hack fix
                  if category.displayName !== 'All Uploads' && category.displayName !== 'Category Overview'
                    a.categoryValue(style="cursor:pointer;" data-value=category.name data-displayname=category.displayName) #{category.displayName}

          div.categoryName(style="display:none")
            h5(style="font-size:20px;").categoryDisplayName Category: $Thing

          //- subcategories
          each category in categories
            if category.subcategories && category.subcategories.length > 1
              div.subcategories(class=category.name style="display:none;")
                label(for='subcategory' style="font-size:18px;") Subcategory (Optional)
                each subcategory in category.subcategories
                    div.subcategory(class=category.name style="display:none")
                      label(style="margin-top:7px;font-size:15px;")
                        input(type='radio', name='subcategory' value=subcategory.name required)
                        | #{subcategory.displayName}

          //- RATINGS
          fieldset
            legend Rating (*)
            div.rating(style="")
              if user.privs.safeForWorkUpload
                div
                  input(type='radio', style="margin-bottom:3rem", name='rating' value="allAges" checked=maxRatingAllowed === "SFW")
                  label Safe For Work

              if maxRatingAllowed == 'NSFW' || maxRatingAllowed == 'SENS'
                div
                  input(type='radio', name='rating' value="mature")
                  label Not Safe For Work

              if maxRatingAllowed == 'SENS'
                div
                  input(type='radio', name='rating' value="sensitive" required)
                  label Sensitive (Shocking content) 18+

              if maxRatingAllowed === "SFW"
                  p The instance host has chosen to make this instance Safe For Work only, please ensure that your upload is Safe For Work

          label(for="description") Description
          textarea#description.descriptionTextArea(name="description" maxlength='2000' rows="10" cols="70")

        button.submit-button(type="submit") Upload

    div.upload-gif
      h3.upload-title-name Your file is uploading
      h1(style="margin-bottom:19px;") Uploading...

      div#myItem1.ldBar(data-preset="circle")

      p(id="uploadTimeElapsed", style="margin-top:77px;") Time elapsed: calculating ...

      p(id="estimatedUploadTimeLeft") Estimated time to completion: calculating ...

      p(id="estimatedTotalUploadTime") Total estimated upload time: calculating ...

append footer
  script.
    $(document).ready(function () {

      // progress bar stuff
      var bar1 = new ldBar("#myItem1");

      var selectedCategory;
      var selectedSubcategory;

      // hide uploading gif
      $(".upload-gif").hide();

      // when a new category is selected
      $('.categoryValue').click(function(){
        var value = $(this).data("value");

        var displayName = $(this).data("displayname");

        // hide all subcategories
        $('.subcategories').hide();

        selectedCategory = value;

        // display selected category
        $('.categoryDisplayName').text('Category: ' + displayName)

        // show subcategories if they exist
        $('.categoryName').show();
        $('.' + value).show();




        console.log(value, displayName);
      })

      var privs = #{user.privs}

      var maxSize;

      if(privs){
        maxSize = '#{user.privs.uploadSize}' || 500;
      } else {
        maxSize = 500;

      }

      var maxSizeInBytes = maxSize * 1000000

      console.log(maxSizeInBytes)

      // set chunk size to 25MB
      var chunkSize = 1000 * 1000 * 25;

      // on submit, build a resumable, and then fire it off

      var r = new Resumable({
        target: '#{uploadUrl}',
        chunkSize: chunkSize,
        simultaneousUploads: 1,
        testChunks: false,
        throttleProgressCallbacks: 1,
        maxFiles: 1,
        maxFileSize: maxSizeInBytes,
        maxFileSizeErrorCallback: function (file, errorCount) {
          swal(`Please upload a file smaller than ${maxSize} MB`);
          // console.log(file);
        }

      });

      // Resumable.js isn't supported, fall back on a different method
      if (!r.support) {
        swal('Sorry, your browser isn\'t supported currently, please update your browser');
      } else {
        var setProgressAndTimeRemaining = null;
        var barProgress = null;
        var estimatedUploadTimeLeft = null;
        var secondsElapsed = null;

        r.assignBrowse($('.resumable-browse')[0]);

        r.assignDrop(document.getElementById('dropTarget'));

        // Handle file add event

        r.on('fileAdded', function (file) {

          // scroll to the div when file selected
          document.getElementById('scrollTo').scrollIntoView({ behavior: 'smooth' });


          // replace underlines with spaces just to be nice
          var fileName = file.fileName.replace(/_/g, " ");

          fileName = fileName.substring(0, fileName.lastIndexOf('.'));

          var title = $('#title').val();

          console.log(title);

          if(!title || title == ""){
            $('#title').val(fileName);
          }

          // auto fill in title

          // console.log(file);

        });

        $('.submit-button').on('click', function (e) {

          var title = $('#title').val();
          var description = $('#description').val();

          var visibility = $('input[name=visibility]:checked').val();
          var rating = $(".rating label input[type='radio']:checked").val();

          var subcategory = $(".subcategory label input[type='radio']:checked").val();

          if(!rating){
            return swal('Please select a rating')
          }

          if(!visibility){
            visibility = 'public'
          }

          $('.upload-title-name').text('File: ' + title);

          if (r.files.length == 0) {
            swal('Please select a file')
            return
          }

          if (title == '') {
            swal('Please enter a title')
            return
          }

          //  HIDE FORM SHOW GIF
          $(".upload-form").hide();

          $('.upload-information').hide();

          $(".upload-gif").show();



          var uploadToken = '#{user.uploadToken}'

          r.opts.query = {
            title,
            description,
            uploadToken,
            visibility,
            rating,
            category: selectedCategory,
            subcategory
          };

          r.upload();

          $('.file-progress').html('BEGINNING UPLOAD...');
        });


        r.on('fileSuccess', function (file, response) {

          console.log('message:')
          console.log(response);

          response = JSON.parse(response);

          if(response.message == 'ALREADY-UPLOADED'){
            //  HIDE FORM SHOW GIF
            $(".upload-form").show();
            $(".upload-gif").hide();


            $('.upload-information').show();


            // auto fill in title
            $('#title').val('');
            return swal({ title: 'File Already Uploaded', text: 'Sorry, this file has already been uploaded, please try another'}, function(){
              window.location.href = '/upload'
            })
          }

          if (response.url) {
            window.location.href = response.url;
          }


          // Reflect that the file upload has completed
          $('.file-progress').html('UPLOAD COMPLETED');
        });


        r.on('fileError', function (file, response) {

          response = JSON.parse(response);

          console.log(response.message);

          console.log('file error');

          if (response.message == 'UNKNOWN-FILETYPE') {
            //  HIDE FORM SHOW GIF
            $(".upload-form").show();
            $(".upload-gif").hide();
            $('.upload-information').show();


            // auto fill in title
            $('#title').val('');
            return swal({
              title: 'File Type Not Supported',
              text: 'Sorry, this file type is not supported, please try another file'
            }, function () {
              window.location.href = '/upload'
            })
          }

          if (response.message == 'ALREADY-UPLOADED') {
            //  HIDE FORM SHOW GIF
            $(".upload-form").show();
            $(".upload-gif").hide();
            $('.upload-information').show();


            // auto fill in title
            $('#title').val('');
            return swal({
              title: 'File Already Uploaded',
              text: 'Sorry, this file has already been uploaded, please try another'
            }, function () {
              window.location.href = '/upload'
            })
          }

          if (response.message == 'UPLOADS_OFF') {
            //  HIDE FORM SHOW GIF
            $(".upload-form").show();
            $(".upload-gif").hide();

            // auto fill in title
            $('#title').val('');
            return swal({
              title: 'Uploads Temporarily Off',
              text: 'Sorry uploads are temporarily turned off (only app moderator is offline)'
            }, function () {
              window.location.href = '/upload'
            })
          }

          // Reflect that the file upload has resulted in error
          $('.file-progress').html('File could not be uploaded: (' + response.message + ')');
        });
        r.on('fileProgress', function (file, response) {

          const progress = Math.floor(file.progress() * 100);

          if (progress === 0 || progress === '0') {
            uploadStartTime = new Date()
            $('.file-progress').html('BEGINNING UPLOAD...');
          } else {
            secondsElapsed = Math.round((new Date() - uploadStartTime) / 1000)
            const progressSpeed = (file.progress() * 100) / secondsElapsed

            estimatedUploadSecondsLeft = Math.ceil((100 - (file.progress() * 100)) / progressSpeed)

            barProgress = progress
          }
        });

        setInterval(function() {
            if (barProgress) {
            $('.file-progress').html('PROGRESS: ' + barProgress + '%');

            bar1.set(barProgress);

            var secondsToFormattedTime = #{secondsToFormattedTime}
            estimatedUploadSecondsLeft = estimatedUploadSecondsLeft > 0 ? estimatedUploadSecondsLeft - 1 : 0
            secondsElapsed += 1

            var formattedElapsedTime = secondsElapsed && secondsToFormattedTime(secondsElapsed)
            var formattedTimeLeft = estimatedUploadSecondsLeft !== null && secondsToFormattedTime(estimatedUploadSecondsLeft)
            var formattedTotalEstimatedProcessingTime = estimatedUploadSecondsLeft !== null && secondsToFormattedTime(estimatedUploadSecondsLeft + secondsElapsed)

            $('#uploadTimeElapsed').text(`Time elapsed: ${formattedElapsedTime ? formattedElapsedTime : "calculating ..."}`)

            $('#estimatedUploadTimeLeft').text(`Estimated time to completion: ${formattedTimeLeft ? formattedTimeLeft : "calculating ..." }`);
            }

            $('#estimatedTotalUploadTime').text(`Total estimated upload time: ${formattedTotalEstimatedProcessingTime ? formattedTotalEstimatedProcessingTime : "calculating ..."}`)

            }, 1000 * 1)
      }
    });
